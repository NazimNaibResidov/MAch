{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    let token = localStorage.getItem('token');\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', 'token');\n    const authReq = request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return next.handle(authReq);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAKEA,WAAW,QACN,sBAAsB;;AAI7B,OAAM,MAAOC,eAAe;EAE1BC,eAAgB;EAEhBC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,IAAIC,OAAO,GAAG,IAAIT,WAAW,EAAE;IAC/BS,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzDD,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC;IAC/C,MAAMC,OAAO,GAAGP,OAAO,CAACQ,KAAK,CAAC;MAC5BC,UAAU,EAAE;QAAEC,aAAa,EAAE,UAAUR,KAAK;MAAE;KAC/C,CAAC;IACF,OAAOD,IAAI,CAACU,MAAM,CAACJ,OAAO,CAAC;EAC7B;;AAbWV,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAe,SAAff,eAAe;AAAA","names":["HttpHeaders","AuthInterceptor","constructor","intercept","request","next","token","localStorage","getItem","headers","set","authReq","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\resid\\source\\repos\\MatcT\\src\\Api\\WebApi\\WebApi.Clinet\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpHeaders\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor() { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let token = localStorage.getItem('token');\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', 'token');\n    const authReq = request.clone({\n      setHeaders: { Authorization: `Bearer ${token}` },\n    });\n    return next.handle(authReq);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}