{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auths.service\";\nexport class LoginGuard {\n  constructor(router, auth) {\n    this.router = router;\n    this.auth = auth;\n  }\n  canActivate(route, state) {\n    //   debugger;\n    let result = this.auth.isLoggedIn;\n    if (!this.auth.isLoggedIn || this.auth.isLoggedIn == undefined) {\n      this.router.navigate(['login']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nLoginGuard.ɵfac = function LoginGuard_Factory(t) {\n  return new (t || LoginGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nLoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginGuard,\n  factory: LoginGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,UAAU;EACrBC,YAAoBC,MAAa,EACxBC,IAAgB;IADL,WAAM,GAAND,MAAM;IACjB,SAAI,GAAJC,IAAI;EAAc;EAC3BC,WAAW,CAETC,KAA6B,EAC7BC,KAA0B;IAC5B;IACI,IAAIC,MAAM,GAAC,IAAI,CAACJ,IAAI,CAACK,UAAU;IAC/B,IAAG,CAAC,IAAI,CAACL,IAAI,CAACK,UAAU,IAAG,IAAI,CAACL,IAAI,CAACK,UAAU,IAAEC,SAAS,EAAC;MAC7D,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;KACZ,MACI;MAEJ,OAAO,IAAI;;EAGb;;AAlBWV,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAW,SAAVX,UAAU;EAAAY,YAFT;AAAM","names":["LoginGuard","constructor","router","auth","canActivate","route","state","result","isLoggedIn","undefined","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\resid\\source\\repos\\MatcT\\src\\Api\\WebApi\\WebApi.Clinet\\src\\app\\Guards\\login.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auths.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n  constructor(private router:Router,\n  private  auth:AuthService){}\n  canActivate(\n   \n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n  //   debugger;\n      let result=this.auth.isLoggedIn;\n      if(!this.auth.isLoggedIn|| this.auth.isLoggedIn==undefined){\n    this.router.navigate(['login']);\n    return false;\n   }\n   else {\n   \n    return true;\n   }\n\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}