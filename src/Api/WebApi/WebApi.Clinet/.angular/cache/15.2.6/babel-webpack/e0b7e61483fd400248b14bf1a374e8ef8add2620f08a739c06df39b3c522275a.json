{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpClientService {\n  constructor(httpClient, baseUrl) {\n    this.httpClient = httpClient;\n    this.baseUrl = baseUrl;\n  }\n  url(requestParameter) {\n    return `${requestParameter.baseUrl ? requestParameter.baseUrl : this.baseUrl}/${requestParameter.controller}${requestParameter.action ? `/${requestParameter.action}` : \"\"}`;\n  }\n  get(requestParameter, id) {\n    let url = \"\";\n    if (requestParameter.fullEndPoint) url = requestParameter.fullEndPoint;else url = `${this.url(requestParameter)}${id ? `/${id}` : \"\"}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`;\n    return this.httpClient.get(url, {\n      headers: requestParameter.headers,\n      responseType: requestParameter.responseType\n    });\n  }\n  post(requestParameter, body) {\n    let url = \"\";\n    //debugger;\n    if (requestParameter.fullEndPoint) url = requestParameter.fullEndPoint;else url = `${this.url(requestParameter)}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`;\n    return this.httpClient.post(url, body, {\n      headers: requestParameter.headers,\n      responseType: requestParameter.responseType\n    });\n  }\n  put(requestParameter, body) {\n    let url = \"\";\n    if (requestParameter.fullEndPoint) url = requestParameter.fullEndPoint;else url = `${this.url(requestParameter)}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`;\n    return this.httpClient.put(url, body, {\n      headers: requestParameter.headers,\n      responseType: requestParameter.responseType\n    });\n  }\n  delete(requestParameter, id) {\n    //debugger;\n    let url = \"\";\n    if (requestParameter.fullEndPoint) url = requestParameter.fullEndPoint;else url = `${this.url(requestParameter)}?id=${id}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`;\n    return this.httpClient.delete(url, {\n      headers: requestParameter.headers,\n      responseType: requestParameter.responseType\n    });\n  }\n  SetLocalItem(name = \"token\", item) {\n    localStorage.setItem(name, item);\n  }\n  GetLocalItem(name = \"token\") {\n    return localStorage.getItem(name);\n  }\n}\nHttpClientService.ɵfac = function HttpClientService_Factory(t) {\n  return new (t || HttpClientService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(\"baseUrl\"));\n};\nHttpClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpClientService,\n  factory: HttpClientService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpClientService","constructor","httpClient","baseUrl","url","requestParameter","controller","action","get","id","fullEndPoint","queryString","headers","responseType","post","body","put","delete","SetLocalItem","name","item","localStorage","setItem","GetLocalItem","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\resid\\source\\repos\\MatcT\\src\\Api\\WebApi\\WebApi.Clinet\\src\\app\\services\\Core\\httpclient.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Observable } from 'rxjs';\nimport { RequestParameters } from 'src/app/models/serviceModel/request-parameters';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientService {\n  constructor(private httpClient: HttpClient, @Inject(\"baseUrl\") private baseUrl: string) { }\n\n  private url(requestParameter: Partial<RequestParameters>): string {\n    return `${requestParameter.baseUrl ? requestParameter.baseUrl : this.baseUrl}/${requestParameter.controller}${requestParameter.action ? `/${requestParameter.action}` : \"\"}`;\n  }\n\n  get<T>(requestParameter: Partial<RequestParameters>, id?: string): Observable<T> {\n    let url: string = \"\";\n\n    if (requestParameter.fullEndPoint)\n\n      url = requestParameter.fullEndPoint;\n\n    else\n      url = `${this.url(requestParameter)}${id ? `/${id}` : \"\"}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`;\n\n    return this.httpClient.get<T>(url, { headers: requestParameter.headers, responseType: requestParameter.responseType as 'json' });\n  }\n\n  post<T>(requestParameter: Partial<RequestParameters>, body: Partial<T>): Observable<T> {\n    let url: string = \"\";\n    //debugger;\n    if (requestParameter.fullEndPoint)\n      url = requestParameter.fullEndPoint;\n    else\n      url = `${this.url(requestParameter)}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`\n\n    return this.httpClient.post<T>(url, body, { headers: requestParameter.headers, responseType: requestParameter.responseType as 'json' });\n  }\n\n  put<T>(requestParameter: Partial<RequestParameters>, body: Partial<T>): Observable<T> {\n    let url: string = \"\";\n    if (requestParameter.fullEndPoint)\n      url = requestParameter.fullEndPoint;\n    else\n      url = `${this.url(requestParameter)}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`;\n\n    return this.httpClient.put<T>(url, body, { headers: requestParameter.headers, responseType: requestParameter.responseType as 'json' });\n  }\n\n  delete<T>(requestParameter: Partial<RequestParameters>, id: string): Observable<T> {\n    //debugger;\n    let url: string = \"\";\n    if (requestParameter.fullEndPoint)\n      url = requestParameter.fullEndPoint;\n    else\n      url = `${this.url(requestParameter)}?id=${id}${requestParameter.queryString ? `?${requestParameter.queryString}` : \"\"}`;\n\n    return this.httpClient.delete<T>(url, { headers: requestParameter.headers, responseType: requestParameter.responseType as 'json' });\n  }\n  SetLocalItem(name: string = \"token\", item: any) {\n    localStorage.setItem(name, item);\n  }\n  GetLocalItem(name: string = \"token\") {\n    return localStorage.getItem(name);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}